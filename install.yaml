#更新
#--------------------------------------------------------------------
- hosts: all
  tasks:
  - name: 更新系统
    tags: update
    yum: name=* state=latest
#准备，安装：必要软件、docker、k8s 
#--------------------------------------------------------------------
- hosts: all
  tasks:
  - name: 安装必要软件
    tags: prepare,prepare-softs
    yum: name="{{ packages }}" state=present
    vars:
      packages:
      - nfs-utils
      - epel-release
      - net-tools
      - wget
      - bash-completion
      - lrzsz
      - unzip
      - bridge-utils.x86_64
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
  - name: 检查防火墙服务是否存在
    tags: prepare,prepare-env
    shell: "if systemctl list-unit-files | grep firewalld > /dev/null; then echo 1; else echo 0; fi;"
    register: firewalld_exists
  - name: 关闭防火墙
    tags: prepare,prepare-env
    shell: "systemctl stop firewalld.service && systemctl disable firewalld.service"
    when: firewalld_exists.stdout == "1"
  - name: 禁用selinux
    tags: prepare,prepare-env
    shell: "setenforce 0 && sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config"
  - name: 禁用swap
    tags: prepare,prepare-env
    shell: swapoff -a
  - name: 开机启动禁用swap交换区
    tags: prepare,prepare-env
    shell: "sed -i 's/^.*swap*/#&/g' /etc/fstab"
  - name: 加载bridge、br_netfilter模块，并设置开机启动
    tags: prepare,prepare-env
    shell: "modprobe bridge && modprobe br_netfilter &&\ 
            touch /etc/modules-load.d/kubernetes.conf &&\ 
            echo 'bridge' > /etc/modules-load.d/kubernetes.conf &&\ 
            echo 'br_netfilter' >> /etc/modules-load.d/kubernetes.conf"
  - name: 设置iptables转发规则
    tags: prepare,prepare-env
    sysctl:
      name: "{{ item.name }}"
      value: "{{ item.value }}"
      sysctl_set: yes
      state: present
      reload: yes
    with_items:
    - {"name":"net.bridge.bridge-nf-call-iptables", "value":1}
    - {"name":"net.bridge.bridge-nf-call-ip6tables","value":1}
    - {"name":"vm.swappiness","value":0}
  - name: 判断是否配置过docker-ce.repo
    tags: prepare,prepare-docker
    shell: ls /etc/yum.repos.d | grep docker-ce.repo || echo 0
    register: check_docker_ce_repo
  - name: 配置docker-ce.repo（如果没配置过）
    tags: prepare,prepare-docker
    shell: "yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo"
    when: check_docker_ce_repo.stdout == "0"
  - name: 判断是否已安装docker
    tags: prepare,prepare-docker
    shell: "if systemctl list-unit-files | grep docker.service > /dev/null; then echo 1; else echo 0; fi;"
    register: check_docker
  - name: 清理未完成事务
    tags: prepare,prepare-docker
    shell: "yum-complete-transaction --cleanup-only"
    when: check_docker.stdout == "0"
  - name: 安装docker-ce-19.03.4
    tags: prepare,prepare-docker
    yum: name={{ packages }} state=present
    vars:
      packages:
      - docker-ce-19.03.4
      - docker-ce-cli-19.03.4
      - containerd.io-1.2.10
    when: check_docker.stdout == "0"
  - name: 配置daemon.json
    tags: prepare,prepare-docker
    copy: src=files/daemon.json dest=/etc/docker/
  - name: 启动 docker
    tags: prepare,prepare-docker
    shell: systemctl daemon-reload && systemctl enable docker && systemctl start docker
  - name: 配置k8s源
    tags: prepare,prepare-k8s
    copy: src=files/kubernetes.repo dest=/etc/yum.repos.d/
- hosts: master,node
  tasks:
  - name: 判断是否已安装k8s
    tags: prepare,prepare-k8s
    shell: "if systemctl list-unit-files | grep kubelet.service > /dev/null; then echo 1; else echo 0; fi;"
    register: check_k8s
  - name: 清理未完成事务
    tags: prepare,prepare-k8s
    shell: "yum-complete-transaction --cleanup-only"
    when: check_k8s.stdout == "0"
  - name: 安装k8s
    tags: prepare,prepare-k8s
    yum: name={{ packages }} state=present
    vars:
      packages:
      - kubelet-1.19.0-0
      - kubectl-1.19.0-0
      - kubeadm-1.19.0-0
      - kubernetes-cni-0.8.7-0
    when: check_k8s.stdout == "0"
  - name: 开机启动kubelet
    tags: prepare,prepare-k8s
    shell: systemctl daemon-reload && systemctl enable kubelet
  - name: 拉取k8s必要镜像
    tags: prepare,prepare-images
    shell: "docker pull {{ google_repo }}/{{ item }}"
    with_items: 
    - kube-proxy:v1.19.0
    - kube-apiserver:v1.19.0
    - kube-controller-manager:v1.19.0
    - kube-scheduler:v1.19.0
    - coredns:1.7.0
    - pause:3.2
  - name: 拉取flannel镜像
    tags: prepare,flannel,flannel-images
    shell: "docker pull {{ k8s_repo }}/{{ item }}"
    with_items: 
    - flannel:v0.13.0-rc2
- hosts: etcd
  tasks:
  - name: 拉取etcd镜像
    tags: prepare,prepare-images
    shell: "docker pull {{ google_repo }}/etcd:3.4.13-0"
#安装三个etcd
#-------------------------------------------------------------------
- hosts: ctrl
  vars:
    etcds:
    - {"path":"/tmp/etcd/etcd0","name":"etcd0","host":"{{ groups.etcd[0] }}"}
    - {"path":"/tmp/etcd/etcd1","name":"etcd1","host":"{{ groups.etcd[1] }}"}
    - {"path":"/tmp/etcd/etcd2","name":"etcd2","host":"{{ groups.etcd[2] }}"}
  tasks:
  - name: 删除目录 /etc/kubernetes、/tmp/etcd
    tags: etcd,etcd-dirs
    file:
      path: "{{ item }}"
      state: absent
    with_items:
    - /etc/kubernetes
    - /tmp/etcd
  - name: 创建目录 /tmp/etcd/xxx
    tags: etcd,etcd-dirs
    file:
      path: "{{ item.path }}"
      state: directory
    with_items: "{{ etcds }}"
  - name: 创建k8s的config配置文件目录 /root/.kube
    tags: etcd,etcd-ctrl-kubeconfig
    file:
      path: /root/.kube
      state: directory
  - name: 生成配置文件
    tags: etcd,etcd-yaml
    template:
      src: files/etcd.yaml
      dest: "{{ item.path }}/etcd.yaml"
    with_items: "{{ etcds }}"
  - name: 生成ca证书
    tags: etcd,etcd-ca
    shell: "kubeadm init phase certs etcd-ca"
  - name: 生成其他证书
    tags: etcd,etcd-certs
    shell: "kubeadm init phase certs etcd-server --config={{ item.path }}/etcd.yaml &&\ 
            kubeadm init phase certs etcd-peer --config={{ item.path }}/etcd.yaml &&\ 
            kubeadm init phase certs etcd-healthcheck-client --config={{ item.path }}/etcd.yaml &&\ 
            kubeadm init phase certs apiserver-etcd-client --config={{ item.path }}/etcd.yaml &&\ 
            cp -R /etc/kubernetes/pki {{ item.path }} &&\ 
            find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete"
    with_items: "{{ etcds }}"